import pandas as pd
import os
import tkinter as tk
from tkinter import filedialog

# this function to process files:
def process_files():
    folder = input_folder_var.get().strip().replace("\\", "/") + "/"
    output_folder = output_folder_var.get().strip().replace("\\", "/") + "/"
    files = os.listdir(folder)
    
    if len(files) == 0:
        result_label.config(text="No files uploaded")
    else:
        total_files = len(files)
        for i, file in enumerate(files, start=1):
            progress_message = f"{i}/{total_files} in progress"
            conversion_message = "\u2713 All files converted successfully" if i == total_files else ""
            result_label.config(text=f"{progress_message}\n{conversion_message}")
            # result_label.update_idletasks() ez csak akkor kell, ha updatelni akarom a korábbi üzenetet
            convert_excels(file, folder, output_folder)
        result_label.config(text=f"{progress_message}\n{conversion_message}\n\nProgram finished.")
        
# function to process each file
def convert_excels(filename, folder, output_folder):

    path = folder+filename
    output_path = output_folder + "Cleaned_" + filename
    
    df = pd.read_excel(path)
    new_cols = ['Name', 'Email', 'Phone', 'Final', 'How_many_persons', 'Allergies']
    
    df = df[['Question-ID', 'User', 'Answer', 'Answer (Value)']]
    
    pivot_df = pd.pivot_table(df, index='User', columns='Question-ID', values='Answer', aggfunc=lambda x: x)
    # rename columns
    pivot_df.columns = new_cols
    res_df = pivot_df.reset_index()
    res_df['Number_of_persons'] = 0
    for index, row in df.iterrows():
        if row['Question-ID'] == 5:
            res_df.loc[res_df['User'] == row['User'], 'Number_of_persons'] = row['Answer (Value)']
            
    res_df = res_df[['User', 'Name', 'Email', 'Phone', 'Final', 'How_many_persons', 'Number_of_persons', 'Allergies']]
    res_df['Number_of_persons'] = res_df['Number_of_persons'].astype(str)
    res_df['Number_of_persons'] = res_df['Number_of_persons'].replace('0', '')

    res_df = res_df.fillna('')

    res_df.to_excel(output_path, index=False)
    #display(res_df)
#     message2 = filename + ' processed'
#     result_label.config(text=message2)
    
# broswer option for input:
def browse_input_folder():
    global input_folder_path
    input_folder_path = filedialog.askdirectory()
    input_folder_var.set(input_folder_path)

# broswer option for input:
def browse_output_folder():
    global output_folder_path
    output_folder_path = filedialog.askdirectory()
    output_folder_var.set(output_folder_path)

# GUI window
window = tk.Tk()
window.title("Ad-hoc app for registrations by FMP")
window.geometry("800x400")
window.configure(bg='#85929E') # → body background color

# set a logo
img = tk.PhotoImage(file='C:/Users/A110526952/OneDrive - Deutsche Telekom AG/trash/logo2_.png')
window.iconphoto(False, img)

# set color scheme
header_bg = '#34495E'
header_font_color = '#D0D3D4'
body_bg = '#85929E'
body_font_color = '#FDEBD0'

# set custom fonts
header_font = ('monospace', 20, 'bold')
body_font = ('monospace', 12)



# Header
header_label = tk.Label(window, text="Converting registrations", bg=header_bg, fg=header_font_color, font=header_font, padx=0, pady=10)
header_label.pack(fill=tk.X)


# input folder label and entry:
input_folder_frame = tk.Frame(window, bg=body_bg)
input_folder_frame.pack(fill=tk.X, padx=20, pady=10)
                        
                        
input_folder_label = tk.Label(input_folder_frame, text="Input Folder:", bg=body_bg, fg=body_font_color, font=body_font, width=15)
input_folder_label.pack(side=tk.LEFT)
                        
input_folder_var = tk.StringVar()
input_folder_entry = tk.Entry(input_folder_frame, textvariable=input_folder_var, font=body_font, width=50)
input_folder_entry.pack(side=tk.LEFT, padx=5)

input_folder_browse_btn = tk.Button(input_folder_frame, text='Browse..', command=browse_input_folder, font=body_font)
input_folder_browse_btn.pack(side=tk.LEFT)  
                        
                        



# output folder label and entry:
output_folder_frame = tk.Frame(window, bg=body_bg)
output_folder_frame.pack(fill=tk.X, padx=20, pady=10)
    
output_folder_label = tk.Label(output_folder_frame, text="Output Folder:", bg=body_bg, fg=body_font_color, font=body_font, width=15)
output_folder_label.pack(side=tk.LEFT)

                        
output_folder_var = tk.StringVar()
output_folder_entry = tk.Entry(output_folder_frame, textvariable=output_folder_var, font=body_font, width=50)
output_folder_entry.pack(side=tk.LEFT, padx=5)
                        
output_folder_browse_btn = tk.Button(output_folder_frame, text='Browse..', command=browse_output_folder, font=body_font)
output_folder_browse_btn.pack(side=tk.LEFT) 

# result label
result_label = tk.Label(window, text="", bg=body_bg, fg=body_font_color, font=body_font)
result_label.pack(padx=20, pady=10)

# process button
process_button = tk.Button(window, text="Process", font=body_font, fg="#FDEBD0", bg='#34495E', command=process_files)
process_button.pack(padx=20, pady=10)

# run GUI event loop:
window.mainloop()
